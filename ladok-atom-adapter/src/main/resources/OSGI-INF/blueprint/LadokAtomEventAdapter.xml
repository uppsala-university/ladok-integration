<?xml version="1.0" encoding="UTF-8"?>

<blueprint default-activation="eager"
	xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
	xmlns:tx="http://aries.apache.org/xmlns/transactions/v1.0.0"
	xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.2.0"
	xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0
			    http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

	<!-- References must be assigned local identifiers. -->
	<reference id="platformTxManager" interface="org.springframework.transaction.PlatformTransactionManager" />
	<reference id="messageIdRepoDs" interface="javax.sql.DataSource" filter="(osgi.jndi.service.name=jdbc/UUDS)" />
	<reference id="amqxa" interface="org.apache.camel.component.jms.JmsComponent" ext:proxy-method='classes' filter="(osgi.jndi.service.name=amq/XA)" />
	<reference id="amqdlq" interface="org.apache.camel.component.jms.JmsComponent" ext:proxy-method='classes' filter="(osgi.jndi.service.name=amq/DLQ)" />
	<reference id="atomClient" interface="se.sunet.ati.ladok.atom.AtomClient" ext:proxy-method='classes' />

	<!-- Idempotent Camel component configured with JDBC and an XA datasource -->
	<bean id="messageIdRepo" class="org.apache.camel.processor.idempotent.jdbc.JdbcMessageIdRepository">
		<argument index="0" ref="messageIdRepoDs"/>
		<argument index="1" ref="jtaTransactionTemplate" />
		<argument index="2" value="Ladok"/>
	</bean>

	<!-- Transaction used in route. -->
	<bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
		<property name="transactionManager" ref="platformTxManager" />
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRED" />
	</bean>

	<!-- Transaction template for JTA. -->
	<bean id="jtaTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="platformTxManager" />
		<property name="propagationBehavior" value="0" />
	</bean>

	<camelContext id="LadokAtomEventAdapter"
			  xmlns="http://camel.apache.org/schema/blueprint"
		      xmlns:events="http://schemas.ladok.se/events"
		      trace="false">

		<route id="LadokAtomEventAdapterRoute">

			<description>
				This is the ATOM adapter for pulling events from Ladok.
			</description>

			<!-- Pull the Ladok ATOM feed every 5 seconds.. -->
			<from id="Ladok ATOM timer" uri="timer://ladok?fixedRate=true&amp;period=5000&amp;repeatCount=0" />

			<!-- Everything after the created transaction will ensure that each read ATOM entry
			     makes it all the way to the queue. -->
			<transacted ref="PROPAGATION_REQUIRED" />

			<!-- Collect the identifier for the last read ATOM entry. -->
			<to id="Last read ATOM entry id assignment" uri="sql:select messageId from CAMEL_MESSAGEPROCESSED where processorName='Ladok' and id = (select max(id) from CAMEL_MESSAGEPROCESSED)?dataSource=messageIdRepoDs&amp;outputType=SelectOne"/>

			<!-- Query new Ladok for new entries and return a splittable list. -->
			<to id="Ladok ATOM Client pull" uri="bean:atomClient?method=getEntries" />

			<!-- For each new entry in the list, log and put the event on the distribution queue. -->
			<split id="ATOM entry handling" streaming="true" stopOnException="true">

				<simple>${body}</simple>

				<setHeader headerName="FeedId">
				    <simple>${body.getBaseUri()}</simple>
				</setHeader>

				<convertBodyTo type="java.lang.String" />

				<setHeader headerName="EntryId">
				    <xpath resultType="java.lang.String">concat(//*[local-name()='id']/text(), "" , "")</xpath>
				</setHeader>

				<to id="ATOM XML washing" uri="xslt:atom/atomwash.xsl"/>

 				<!-- Message identifier extracted form message and put in header. -->
				<setHeader headerName="MessageId">
				    <simple>${headers.FeedId};${headers.EntryId}</simple>
				</setHeader>

				<idempotentConsumer id="Idempotency handling" messageIdRepositoryRef="messageIdRepo" skipDuplicate="true">

				    <!-- Use the MessageId header as key for identifying duplicate messages -->
				    <header>MessageId</header>

				    <!-- Distribute -->
				    <to id="Event distribution" uri="amqxa:queue:ladok-distribution" />

				</idempotentConsumer>

			</split>

		</route>

	</camelContext>

</blueprint>
